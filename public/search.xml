<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>next配置gittalk评论系统</title>
      <link href="/2019/08/21/next%E6%B7%BB%E5%8A%A0gittalk%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"/>
      <url>/2019/08/21/next%E6%B7%BB%E5%8A%A0gittalk%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p>博客一直没有来得及添加评论系统，主要是考虑添加哪一个评论系统。最终选择gittalk，看了许多网上的文章发现都是旧版本的，本文适用next7.3版本。</p><a id="more"></a><blockquote><p><code>Gitalk</code>是利用了<a href="https://developer.github.com/v3/" target="_blank" rel="noopener">GithubAPI</a>，将网站的评论转写到<code>Github</code>上指定仓库的<code>Issues</code>里，相当于做了一个代理.</p></blockquote><h3 id="1-建立评论仓库"><a href="#1-建立评论仓库" class="headerlink" title="1. 建立评论仓库"></a>1. 建立评论仓库</h3><p>建立一个名gitalk-commnet的评论仓库</p><h3 id="2-新建OAuth-Apps"><a href="#2-新建OAuth-Apps" class="headerlink" title="2. 新建OAuth Apps"></a>2. 新建OAuth Apps</h3><p>github沿路径setting/Developer setting/OAuth Apps，新建自己的OAuth Apps，并参照下图填写，</p><p><img src="/images/my_img/190821-1.jpg" alt></p><p>Register Application后可以看到client_id与client_secret请将其保存留待下步</p><h3 id="3-更改配置文件"><a href="#3-更改配置文件" class="headerlink" title="3. 更改配置文件"></a>3. 更改配置文件</h3><p>在主题配置文件next/_config.yml搜索锁定gitalk，并如下更改</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">gitalk:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  github_id:</span> <span class="comment">#github用户名,登陆时习惯用邮箱的放这里不行。一定得是自己的ID!</span></span><br><span class="line"><span class="attr">  id:</span> <span class="string">location.pathname</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">gitalk-commnet</span><span class="comment">#仓库名</span></span><br><span class="line"><span class="attr">  client_id:</span> <span class="comment">#application的id，即上文client_id</span></span><br><span class="line"><span class="attr">  client_secret:</span> <span class="comment">#application的密码，即上文client_secret</span></span><br><span class="line"><span class="attr">  admin_user:</span></span><br><span class="line"><span class="attr">  distraction_free_mode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Gitalk's display language depends on user's browser or system environment</span></span><br><span class="line">  <span class="comment"># If you want everyone visiting your site to see a uniform language, you can set a force language value</span></span><br><span class="line">  <span class="comment"># Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span></span><br><span class="line"><span class="attr">  language:</span> <span class="string">zh-CN</span></span><br></pre></td></tr></table></figure><h3 id="4-问题解决"><a href="#4-问题解决" class="headerlink" title="4 . 问题解决"></a>4 . 问题解决</h3><h4 id="4-1-未找到相关的issue进行评论，请联系-XXX初始化创建"><a href="#4-1-未找到相关的issue进行评论，请联系-XXX初始化创建" class="headerlink" title="4.1 未找到相关的issue进行评论，请联系@XXX初始化创建"></a>4.1 未找到相关的issue进行评论，请联系@XXX初始化创建</h4><p>问题： 未找到相关的issue进行评论，请联系@XXX初始化创建<br>浏览器进入开发者模式，我们可以看到<code>https://api.github.com/user 401 (Unauthorized)</code></p><p>解决办法：在主题配置文件中gitalk配置里添加<code>id: location.pathname</code></p><p>更多解决可以参照<a href="https://github.com/gitalk/gitalk/issues/138" target="_blank" rel="noopener">https://github.com/gitalk/gitalk/issues/138</a></p><h4 id="4-2-自动初始化"><a href="#4-2-自动初始化" class="headerlink" title="4.2 自动初始化"></a>4.2 自动初始化</h4><p>待解决，不然每次自己一篇篇文章初始化，想想都不能忍。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> next </tag>
            
            <tag> gitalk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot-7. 使用Swagger构建API文档</title>
      <link href="/2019/08/20/SpringBoot-7.%20%E4%BD%BF%E7%94%A8Swagger%E6%9E%84%E5%BB%BA%E6%96%87%E6%A1%A3/"/>
      <url>/2019/08/20/SpringBoot-7.%20%E4%BD%BF%E7%94%A8Swagger%E6%9E%84%E5%BB%BA%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<p>swagger可以降低我们前后端开发文档同步问题，其能够根据我们的代码注释自动生成API文档，而我们只需简单的运用其注释即可，可视化的呈现程序所有的接口列表，非常方便我们前后端进行接口调试。</p><a id="more"></a><blockquote><p>The Best APIs are Built with Swagger Tools</p></blockquote><blockquote><p>Swagger工具可以帮助您完成生成和维护API文档的工作，确保您的文档在API发展过程中保持最新状态。</p></blockquote><h3 id="1-添加Swagger依赖"><a href="#1-添加Swagger依赖" class="headerlink" title="1. 添加Swagger依赖"></a>1. 添加Swagger依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- swagger --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-新建SwaggerConfig类"><a href="#2-新建SwaggerConfig类" class="headerlink" title="2. 新建SwaggerConfig类"></a>2. 新建SwaggerConfig类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">api</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.any())</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfo(</span><br><span class="line">                <span class="string">"Spring Boot Swagger Test"</span>,</span><br><span class="line">                <span class="string">"我的博客网站：https://zyz-1998.github.io/，欢迎大家访问。"</span>,</span><br><span class="line">                <span class="string">"API V1.0"</span>,</span><br><span class="line">                <span class="string">"Terms of service"</span>,</span><br><span class="line">                <span class="keyword">new</span> Contact(<span class="string">"zyz"</span>, <span class="string">"https://zyz-1998.github.io/"</span>, <span class="string">"1744020412@qq.com"</span>),</span><br><span class="line">                <span class="string">"Apache"</span>, <span class="string">"http://www.apache.org/"</span>, Collections.emptyList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-添加文档内容"><a href="#3-添加文档内容" class="headerlink" title="3. 添加文档内容"></a>3. 添加文档内容</h3><p>用于Controller(控制类)</p><table><thead><tr><th>注解</th><th>作用</th></tr></thead><tbody><tr><td>@Api</td><td>表示一个开放的API</td></tr><tr><td>@ApiOperation</td><td>给API增加说明，表示针对该API的CRUD操作</td></tr><tr><td>@ApiResponses</td><td>描述API操作可能出现的异常情况</td></tr><tr><td>@ApiImplicitParams<code>、</code>@ApiImplicitParam</td><td>给API参数增加说明。</td></tr></tbody></table><p>用于model(实体类)</p><table><thead><tr><th>注解</th><th>作用</th></tr></thead><tbody><tr><td>@ApiModel</td><td>注解实体</td></tr><tr><td>@ApiModelProperty</td><td>定义实体属性</td></tr></tbody></table><ul><li>官方注解文档：<a href="http://docs.swagger.io/swagger-core/apidocs/index.html" target="_blank" rel="noopener">http://docs.swagger.io/swagger-core/apidocs/index.html</a></li></ul><h3 id="4-访问验证"><a href="#4-访问验证" class="headerlink" title="4. 访问验证"></a>4. 访问验证</h3><p><code>http://localhost:8080/swagger-ui.html#/</code></p><p>效果如下：</p><p><img src="/images/my_img/190820-1.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Springboot </tag>
            
            <tag> Swagger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot-6. blog system填坑版 shiro</title>
      <link href="/2019/08/17/SpringBoot-6%20blogsystem%E5%A1%AB%E5%9D%91%E7%89%88/"/>
      <url>/2019/08/17/SpringBoot-6%20blogsystem%E5%A1%AB%E5%9D%91%E7%89%88/</url>
      
        <content type="html"><![CDATA[<p>俗话说光说不练假把式，实习中发现了自己许多不足，特此挖个坑，做个简单的博客系统以便对于web开发有更深的理解，再者为以后做打算，毕竟基于github的博客还是有一定的不便的，博客基于springboot2.1开发，shiro实现权限控制，插件EditorMD。毕竟是填坑版，还有许多功能不完善甚至没有Σ( ° △ °|||)︴</p><a id="more"></a><h3 id="一-系统简介"><a href="#一-系统简介" class="headerlink" title="一. 系统简介"></a>一. 系统简介</h3><h4 id="1-1-开发工具"><a href="#1-1-开发工具" class="headerlink" title="1.1 开发工具"></a>1.1 开发工具</h4><p>软件：intellij<br>框架：springboot、shiro(安全框架)<br>前端：thymeleaf + bootstrap<br>日志：logback<br>数据库：mysql<br>插件：Editormd(支持markdown)</p><h4 id="1-2-效果预览"><a href="#1-2-效果预览" class="headerlink" title="1.2 效果预览"></a>1.2 效果预览</h4><p>鉴于目前系统距离完善还相差甚远，遂赶紧贴几张图填填坑。鉴于篇幅这里主要介绍shiro配置<br>资源地址：<a href="https://github.com/zyz-1998/blog-system" target="_blank" rel="noopener">https://github.com/zyz-1998/blog-system</a><br><img src="/images/my_img/190817-1.jpg" alt="前台预览"><br><img src="/images/my_img/190817-2.jpg" alt="前台预览"><br><img src="/images/my_img/190817-3.jpg" alt="后台预览"><br><img src="/images/my_img/190817-5.jpg" alt="后台预览"><br><img src="/images/my_img/190817-8.jpg" alt="后台预览"></p><h3 id="二-shiro简介"><a href="#二-shiro简介" class="headerlink" title="二. shiro简介"></a>二. shiro简介</h3><blockquote><p>Apache shiro是一个功能强大且易于使用的Java安全框架，可执行身份验证，授权，加密和会话管理。</p></blockquote><p>理解shiro首要理解两张图即可，如下所示</p><h3 id="2-1-系统架构"><a href="#2-1-系统架构" class="headerlink" title="2.1 系统架构"></a>2.1 系统架构</h3><p><img src="/images/my_img/190817-6.jpg" alt><br>在shiro架构中，有3个最主要的组件：Subject，SecurityManager，Realm。<br>Subject本质上就是当前访问用户的抽象描述。<br>SecurityManager是Shiro架构中最核心的组件，通过它可以协调其他组件完成用户认证和授权。换句话来说，SecurityManager就是Shiro框架的控制器。<br>Realm定义了访问数据的方式，用来连接不同的数据源，如：LDAP，关系数据库，配置文件等等。</p><h3 id="2-2-核心架构"><a href="#2-2-核心架构" class="headerlink" title="2.2 核心架构"></a>2.2 核心架构</h3><p><img src="/images/my_img/190817-7.jpg" alt></p><p>Authenticator(认证)：负责执行用户的登录操作。<br>Authentication Strategy(认证策略)：是个无状态的组件，在认证过程中会进行4次调用。然后将Realm中的结果信息封装至AuthenticationInfo实例中并返回作为Subject的身份信息。<br>Authorizer(授权)：负责用户的访问权限控制。</p><h3 id="2-3-具体实现"><a href="#2-3-具体实现" class="headerlink" title="2.3 具体实现"></a>2.3 具体实现</h3><ol><li>定义实体用户信息、用户角色、用户权限</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//UserInfo</span></span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="meta">@Column</span>(unique =<span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> String username;<span class="comment">//帐号</span></span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//名称（昵称或者真实姓名，不同系统不同定义）</span></span><br><span class="line">    <span class="keyword">private</span> String password; <span class="comment">//密码;</span></span><br><span class="line">    <span class="keyword">private</span> String salt;<span class="comment">//加密密码的盐</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span> state;<span class="comment">//用户状态,0:创建未认证（比如没有激活，没有输入验证码等等）--等待验证的用户 , 1:正常状态,2：用户被锁定.</span></span><br><span class="line">    <span class="meta">@ManyToMany</span>(fetch= FetchType.EAGER)<span class="comment">//立即从数据库中进行加载数据;</span></span><br><span class="line">    <span class="meta">@JoinTable</span>(name = <span class="string">"SysUserRole"</span>, joinColumns = &#123; <span class="meta">@JoinColumn</span>(name = <span class="string">"uid"</span>) &#125;, inverseJoinColumns =&#123;<span class="meta">@JoinColumn</span>(name = <span class="string">"roleId"</span>) &#125;)</span><br><span class="line">    <span class="keyword">private</span> List&lt;SysRole&gt; roleList;<span class="comment">// 一个用户具有多个角色</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SysRole</span></span><br><span class="line"><span class="meta">@Id</span><span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span> Integer id; <span class="comment">// 编号</span></span><br><span class="line">    <span class="keyword">private</span> String role; <span class="comment">// 角色标识程序中判断使用,如"admin",这个是唯一的:</span></span><br><span class="line">    <span class="keyword">private</span> String description; <span class="comment">// 角色描述,UI界面显示使用</span></span><br><span class="line">    <span class="keyword">private</span> Boolean available = Boolean.FALSE; <span class="comment">// 是否可用,如果不可用将不会添加给用户</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//角色 -- 权限关系：多对多关系;</span></span><br><span class="line">    <span class="meta">@ManyToMany</span>(fetch= FetchType.EAGER)</span><br><span class="line">    <span class="meta">@JoinTable</span>(name=<span class="string">"SysRolePermission"</span>,joinColumns=&#123;<span class="meta">@JoinColumn</span>(name=<span class="string">"roleId"</span>)&#125;,inverseJoinColumns=&#123;<span class="meta">@JoinColumn</span>(name=<span class="string">"permissionId"</span>)&#125;)</span><br><span class="line">    <span class="keyword">private</span> List&lt;SysPermission&gt; permissions;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用户 - 角色关系定义;</span></span><br><span class="line">    <span class="meta">@ManyToMany</span></span><br><span class="line">    <span class="meta">@JoinTable</span>(name=<span class="string">"SysUserRole"</span>,joinColumns=&#123;<span class="meta">@JoinColumn</span>(name=<span class="string">"roleId"</span>)&#125;,inverseJoinColumns=&#123;<span class="meta">@JoinColumn</span>(name=<span class="string">"uid"</span>)&#125;)</span><br><span class="line">    <span class="keyword">private</span> List&lt;UserInfo&gt; userInfos;<span class="comment">// 一个角色对应多个用户</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SysPermission</span></span><br><span class="line"><span class="meta">@Id</span><span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;<span class="comment">//主键.</span></span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//名称.</span></span><br><span class="line">    <span class="meta">@Column</span>(columnDefinition=<span class="string">"enum('menu','button')"</span>)</span><br><span class="line">    <span class="keyword">private</span> String resourceType;<span class="comment">//资源类型，[menu|button]</span></span><br><span class="line">    <span class="keyword">private</span> String url;<span class="comment">//资源路径.</span></span><br><span class="line">    <span class="keyword">private</span> String permission; <span class="comment">//权限字符串,menu例子：role:*，button例子：role:create,role:update,role:delete,role:view</span></span><br><span class="line">    <span class="keyword">private</span> Long parentId; <span class="comment">//父编号</span></span><br><span class="line">    <span class="keyword">private</span> String parentIds; <span class="comment">//父编号列表</span></span><br><span class="line">    <span class="keyword">private</span> Boolean available = Boolean.FALSE;</span><br><span class="line">    <span class="meta">@ManyToMany</span></span><br><span class="line">    <span class="meta">@JoinTable</span>(name=<span class="string">"SysRolePermission"</span>,joinColumns=&#123;<span class="meta">@JoinColumn</span>(name=<span class="string">"permissionId"</span>)&#125;,inverseJoinColumns=&#123;<span class="meta">@JoinColumn</span>(name=<span class="string">"roleId"</span>)&#125;)</span><br></pre></td></tr></table></figure><ol start="2"><li>定义Realm，继承AuthorizingRealm重写以下两个方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"权限配置--&gt;MyShiroRealm.doGetAuthorizationInfo()"</span>);</span><br><span class="line">    SimpleAuthorizationInfo authorizationInfo = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">    UserInfo userInfo  = (UserInfo)principals.getPrimaryPrincipal();</span><br><span class="line">    <span class="keyword">for</span>(SysRole role:userInfo.getRoleList())&#123;</span><br><span class="line">        authorizationInfo.addRole(role.getRole());</span><br><span class="line">        <span class="keyword">for</span>(SysPermission p:role.getPermissions())&#123;</span><br><span class="line">            authorizationInfo.addStringPermission(p.getPermission());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> authorizationInfo;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//表示根据用户身份获取授权信息。这种方式的好处是当只需要身份验证时只需要获取身份验证信息而不需要获取授权信息</span></span><br><span class="line"><span class="comment">/*主要是用来进行身份认证的，也就是说验证用户输入的账号和密码是否正确。*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"MyShiroRealm.doGetAuthenticationInfo()"</span>);</span><br><span class="line">    <span class="comment">//获取用户的输入的账号，getPrincipal()获取自定义Realm信息</span></span><br><span class="line">    String username = (String)token.getPrincipal();</span><br><span class="line">    <span class="comment">//输出令牌的获取凭证</span></span><br><span class="line">    System.out.println(token.getCredentials());</span><br><span class="line">    <span class="comment">//通过username从数据库中查找 User对象，如果找到，没找到.</span></span><br><span class="line">    <span class="comment">//实际项目中，这里可以根据实际情况做缓存，如果不做，Shiro自己也是有时间间隔机制，2分钟内不会重复执行该方法</span></span><br><span class="line">    UserInfo userInfo = userInfoService.findByUsername(username);</span><br><span class="line">    System.out.println(<span class="string">"-----&gt;&gt;userInfo="</span>+userInfo);</span><br><span class="line">    <span class="keyword">if</span>(userInfo == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//简单的验证信息 身份验证信息</span></span><br><span class="line">    SimpleAuthenticationInfo authenticationInfo = <span class="keyword">new</span> SimpleAuthenticationInfo(</span><br><span class="line">        userInfo, <span class="comment">//用户名</span></span><br><span class="line">        userInfo.getPassword(), <span class="comment">//密码</span></span><br><span class="line">        ByteSource.Util.bytes(userInfo.getCredentialsSalt()),<span class="comment">//salt=username+salt</span></span><br><span class="line">        getName()  <span class="comment">//realm name</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> authenticationInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>最后进行shiro配置，核心代码如下</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">ShiroFilterFactoryBean shiroFilterFactoryBean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">shiroFilterFactoryBean.setSecurityManager(securityManager);</span><br><span class="line"><span class="comment">//拦截器.</span></span><br><span class="line">Map&lt;String,String&gt; filterChainDefinitionMap = <span class="keyword">new</span> LinkedHashMap&lt;String,String&gt;();</span><br><span class="line"><span class="comment">//配置退出过滤器,其中的具体的退出代码Shiro已经替我们实现了</span></span><br><span class="line">filterChainDefinitionMap.put(<span class="string">"/logout"</span>, <span class="string">"logout"</span>);</span><br><span class="line"><span class="comment">// 配置不会被拦截的链接 顺序判断</span></span><br><span class="line"><span class="comment">//filterChainDefinitionMap.put("/static/**", "anon");</span></span><br><span class="line">filterChainDefinitionMap.put(<span class="string">"/image/**"</span>, <span class="string">"anon"</span>);<span class="comment">//img</span></span><br><span class="line">filterChainDefinitionMap.put(<span class="string">"/css/**"</span>, <span class="string">"anon"</span>);<span class="comment">//css</span></span><br><span class="line">filterChainDefinitionMap.put(<span class="string">"/js/**"</span>, <span class="string">"anon"</span>);<span class="comment">//js</span></span><br><span class="line">filterChainDefinitionMap.put(<span class="string">"/home/**"</span>, <span class="string">"anon"</span>);<span class="comment">//front desk</span></span><br><span class="line"><span class="comment">//&lt;!-- 过滤链定义，从上向下顺序执行，一般将/**放在最为下边 --&gt;:这是一个坑呢，一不小心代码就不好使了;</span></span><br><span class="line"><span class="comment">//&lt;!-- authc:所有url都必须认证通过才可以访问; anon:所有url都都可以匿名访问--&gt;</span></span><br><span class="line">filterChainDefinitionMap.put(<span class="string">"/**"</span>, <span class="string">"authc"</span>);</span><br><span class="line"><span class="comment">// 如果不设置默认会自动寻找Web工程根目录下的"/login.jsp"页面</span></span><br><span class="line">shiroFilterFactoryBean.setLoginUrl(<span class="string">"/login"</span>);</span><br><span class="line"><span class="comment">// 登录成功后要跳转的链接</span></span><br><span class="line">shiroFilterFactoryBean.setSuccessUrl(<span class="string">"/admin"</span>);</span><br><span class="line"><span class="comment">//未授权界面;</span></span><br><span class="line">shiroFilterFactoryBean.setUnauthorizedUrl(<span class="string">"/403"</span>);</span><br><span class="line">shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Springboot </tag>
            
            <tag> Shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot-5. logback日志配置</title>
      <link href="/2019/08/13/SpringBoot-5%20logback%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/08/13/SpringBoot-5%20logback%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>SpringBoot内部集成了LogBack日志依赖，SpringBoot默认使用LogBack记录日志信息，默认根据logback-springboot.xml配置内容来输出到控制台和文件之中。</p><a id="more"></a><blockquote><p>By default, Spring Boot logs only to the console and does not write log files. If you want to write log files in addition to the console output, you need to set a logging.file or logging.path property (for example, in your application.properties).</p></blockquote><p>通过在配置文件application.properties中设置 logging.path= 或者logging.file=来指定日志输出路径，也可以在xml中设定，如下参考</p><h3 id="1-控制类例子"><a href="#1-控制类例子" class="headerlink" title="1. 控制类例子"></a>1. 控制类例子</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.neo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(LoginController.class);</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(HttpServletRequest request, Map&lt;String, Object&gt; map)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        logger.info(<span class="string">"登录控制器，登录"</span>);</span><br><span class="line">        <span class="comment">// 登录失败从request中获取shiro处理的异常信息。</span></span><br><span class="line">        <span class="comment">// shiroLoginFailure:就是shiro异常类的全类名.</span></span><br><span class="line">        String exception = (String) request.getAttribute(<span class="string">"shiroLoginFailure"</span>);</span><br><span class="line">        logger.info(<span class="string">"异常"</span>  + exception);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/403"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">unauthorizedRole</span><span class="params">()</span></span>&#123;</span><br><span class="line">        logger.info(<span class="string">"------没有权限-------"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"403"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LogBack读取配置文件的步骤<br>（1）尝试classpath下查找文件logback-test.xml<br>（2）如果文件不存在，尝试查找logback.xml<br>（3）如果两个文件都不存在，LogBack用BasicConfiguration自动对自己进行最小化配置，这样既实现了上面我们不需要添加任何配置就可以输出到控制台日志信息。</p><h3 id="2-logback配置文件"><a href="#2-logback配置文件" class="headerlink" title="2. logback配置文件"></a>2. logback配置文件</h3><p>resources目录下新建logback配置文件logback.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span> <span class="attr">value</span>=<span class="string">"./logs"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 控制台输出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.encoder.PatternLayoutEncoder"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg  %n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 按照每天生成日志文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"FILE"</span>  <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件输出的文件名--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/runtime.log.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.encoder.PatternLayoutEncoder"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件最大的大小--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">triggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxFileSize</span>&gt;</span>10MB<span class="tag">&lt;/<span class="name">MaxFileSize</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">triggeringPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 日志输出级别 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下</p><p><img src="/images/my_img/190813-1.jpg" alt></p><h3 id="3-屏蔽记录日志"><a href="#3-屏蔽记录日志" class="headerlink" title="3. 屏蔽记录日志"></a>3. 屏蔽记录日志</h3><p>如果我们在项目中需要屏蔽某个或者多个包下不输出日志也不记录日志到文件内，那么我们需要修改application.yml添加对应配置:<br>logging:<br>  level:<br>   com.ly.logback.controller: ‘off’</p><blockquote><p>参考链接：<a href="https://www.jianshu.com/p/6dcb2e05dc5a" target="_blank" rel="noopener">https://www.jianshu.com/p/6dcb2e05dc5a</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot-4. thymeleaf+jpa实现增删改查与登录验证</title>
      <link href="/2019/08/08/SpringBoot-4%20thymeleaf+jpa%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
      <url>/2019/08/08/SpringBoot-4%20thymeleaf+jpa%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</url>
      
        <content type="html"><![CDATA[<p>实例主要运用thymeleaf与jpa，实现数据的增删改查的功能，并进一步添加了登录功能（实现拦截器与视图解析的基本配置）jpa为我们提供便捷数据库操作，简化开发难度，thymeleaf实现前端数据渲染。<br>资源地址：<a href="https://github.com/zyz-1998/project/tree/master/jpaThymeleafTest" target="_blank" rel="noopener">https://github.com/zyz-1998/project/tree/master/jpaThymeleafTest</a></p><a id="more"></a><h3 id="一、实例简介"><a href="#一、实例简介" class="headerlink" title="一、实例简介"></a>一、实例简介</h3><p>实体类(domain)定义实体，数据访问层(Dao)实现对数据库的操作，数据服务层(Service)定义各种服务接口，数据服务的实现(serviceImpl)定义数据服务层的具体实现，控制层(Controller)响应请求<br>配置信息类(configure)实现诸如拦截器、视图解析的配置。<br>目录结构<br><img src="/images/my_img/190808-1.jpg" alt><br>部分效果<br><img src="/images/my_img/190808-2.jpg" alt><br><img src="/images/my_img/190808-3.jpg" alt></p><h3 id="二-Thymeleaf"><a href="#二-Thymeleaf" class="headerlink" title="二. Thymeleaf"></a>二. Thymeleaf</h3><blockquote><p>Thymeleaf是服务器端的一种Java模板引擎</p></blockquote><blockquote><p>优点：静态html嵌入标签属性，浏览器可以直接打开模板文件，便于前后端联调</p></blockquote><h4 id="2-1-导入thymeleaf依赖"><a href="#2-1-导入thymeleaf依赖" class="headerlink" title="2.1 导入thymeleaf依赖"></a>2.1 导入thymeleaf依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    pId&gt;org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-2-引入命名空间"><a href="#2-2-引入命名空间" class="headerlink" title="2.2 引入命名空间"></a>2.2 引入命名空间</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-th属性"><a href="#2-3-th属性" class="headerlink" title="2.3 th属性"></a>2.3 th属性</h4><table><thead><tr><th></th><th>功能</th><th>标签</th><th>功能和jsp对比</th></tr></thead><tbody><tr><td>1</td><td>Fragment inclusion</td><td>th:insert th:replace</td><td>include(片段包含)</td></tr><tr><td>2</td><td>Fragment iteration</td><td>th:each</td><td>c:forEach(遍历)</td></tr><tr><td>3</td><td>Conditional evaluation</td><td>th:if th:unless th:switch th:case</td><td>c:if(条件判断)</td></tr><tr><td>4</td><td>Local variable definition</td><td>th:object  th:with</td><td>c:set(声明变量)</td></tr><tr><td>5</td><td>General attribute modification</td><td>th:attr th:attrprepend th:attrappend</td><td>属性修改支持前面和后面追加内容</td></tr><tr><td>6</td><td>Specific attribute modification</td><td>th:value th:href th:src …</td><td>修改任意属性值</td></tr><tr><td>7</td><td>Text (tag body modification)</td><td>th:text th:utext</td><td>修改标签体内容utext：不转义字符大标题</td></tr><tr><td>8</td><td>Fragment specification</td><td>th:fragment</td><td>声明片段</td></tr><tr><td>9</td><td>Fragment removal</td><td>th:remove</td><td>删除模板片段</td></tr></tbody></table><h4 id="2-4-标准表达式语法"><a href="#2-4-标准表达式语法" class="headerlink" title="2.4 标准表达式语法"></a>2.4 标准表达式语法</h4><p><code>${...}</code> 变量表达式，Variable Expressions</p><p><code>@{...}</code> 链接表达式，Link URL Expressions</p><p><code>#{...}</code> 消息表达式，Message Expressions</p><p><code>~{...}</code> 代码块表达式，Fragment Expressions</p><p><code>*{...}</code> 选择变量表达式，Selection Variable Expressions</p><h3 id="三-jpa"><a href="#三-jpa" class="headerlink" title="三. jpa"></a>三. jpa</h3><blockquote><p>Jpa (Java Persistence API) 是 Sun 官方提出的 Java 持久化规范。</p></blockquote><blockquote><p>Spring Boot Jpa 是 Spring 基于 ORM 框架、Jpa 规范的基础上封装的一套 Jpa 应用框架，可使开发者用极简的代码即可实现对数据的访问和操作。让我们解脱了 DAO 层的操作，基本上所有 CRUD 都可以依赖于它来实现</p></blockquote><p>当我们需要定义自己的Repository的时候，我们可以继承JpaRepository，从而获得Spring为我们预先定义的多种基本数据操作方法。</p><p>pom.xml导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>application.properties配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#jdbc</span></span><br><span class="line"><span class="string">spring.datasource.url=jdbc:mysql://127.0.0.1/test?useUnicode=true&amp;characterEncoding=utf-8&amp;&amp;serverTimezone=UTC&amp;useSSL=true</span></span><br><span class="line"><span class="string">spring.datasource.username=root</span></span><br><span class="line"><span class="string">spring.datasource.password=zyz98</span></span><br><span class="line"><span class="string">spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment">#jpa</span></span><br><span class="line"><span class="string">spring.jpa.properties.hibernate.hbm2ddl.auto=update</span></span><br><span class="line"><span class="string">spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect</span></span><br><span class="line"><span class="string">spring.jpa.show.sql=true</span></span><br><span class="line"><span class="comment">#禁用thymeleaf缓存</span></span><br><span class="line"><span class="string">spring.thymeleaf.cache=false</span></span><br></pre></td></tr></table></figure><h3 id="四-登录拦截器配置"><a href="#四-登录拦截器配置" class="headerlink" title="四. 登录拦截器配置"></a>四. 登录拦截器配置</h3><p>定义LoginHandlerInterceptor类实现HandlerInterceptor接口方法，preHandle()请求处理前执行操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginHandlerInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Object user = request.getSession().getAttribute(<span class="string">"loginUser"</span>);</span><br><span class="line">        <span class="keyword">if</span>(user!=<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        request.setAttribute(<span class="string">"loginMsg"</span>,<span class="string">"没权限请先登录"</span>);</span><br><span class="line">        request.getRequestDispatcher(<span class="string">"/login"</span>).forward(request,response);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在configure层MyConfigure类中添加登录拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfigure</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span></span>&#123;</span><br><span class="line">        registry.addViewController(<span class="string">"/"</span>).setViewName(<span class="string">"/user/login"</span>);</span><br><span class="line">        registry.addViewController(<span class="string">"/login"</span>).setViewName(<span class="string">"/user/login"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//添加拦截器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> LoginHandlerInterceptor()).addPathPatterns(<span class="string">"/**"</span>).excludePathPatterns(<span class="string">"/"</span>,<span class="string">"/login"</span>,<span class="string">"/userLogin"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考链接：</p><p><a href="http://www.ityouknow.com/springboot/2017/09/23/spring-boot-jpa-thymeleaf-curd.html" target="_blank" rel="noopener">http://www.ityouknow.com/springboot/2017/09/23/spring-boot-jpa-thymeleaf-curd.html</a></p><p><a href="https://www.cnblogs.com/songxingzhu/p/9597927.html" target="_blank" rel="noopener">https://www.cnblogs.com/songxingzhu/p/9597927.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>next主题初步配置美化</title>
      <link href="/2019/08/03/next%E4%B8%BB%E9%A2%98%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E7%BE%8E%E5%8C%96/"/>
      <url>/2019/08/03/next%E4%B8%BB%E9%A2%98%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E7%BE%8E%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>最近突然迷上了next主题，故换上这个新装，并初步进行了相关文章、本地搜索、页面点击效果、文章置顶、网页标签图标等设置，算是简单的完成了这次的主题的配置，后期还待优化，毕竟next主题自定义和扩展都很丰富。</p><a id="more"></a><h3 id="1-添加相关文章功能"><a href="#1-添加相关文章功能" class="headerlink" title="1. 添加相关文章功能"></a>1. 添加相关文章功能</h3><p>插件：hexo-related-popular-posts</p><p>插件地址：<a href="https://github.com/tea3/hexo-related-popular-posts#1-edit-your-theme" target="_blank" rel="noopener">https://github.com/tea3/hexo-related-popular-posts#1-edit-your-theme</a></p><p>安装：npm install hexo-related-popular-posts –save</p><p>修改：hexo-theme-next/blob/master/layout/_macro/post.swig文件</p><p>修改如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  &#123;&#123; popular_posts( &#123;&#125; , post ) &#125;&#125;  </span><br><span class="line">  &#123;######################&#125;</span><br><span class="line">  &#123;### END POST BLOCK ###&#125;</span><br><span class="line">  &#123;######################&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-添加本地搜索功能"><a href="#2-添加本地搜索功能" class="headerlink" title="2. 添加本地搜索功能"></a>2. 添加本地搜索功能</h3><p>插件：hexo-generator-search</p><p><code>npm install hexo-generator-search --save</code></p><p>在站点配置文件_config.yml添加如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Search </span><br><span class="line">search:</span><br><span class="line">  path: ./public/search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 1000</span><br></pre></td></tr></table></figure><p>修改主题配置文件_config.yml如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  trigger: auto</span><br><span class="line">  # Show top n results per article, show all results by setting to -1</span><br><span class="line">  top_n_per_article: 1</span><br></pre></td></tr></table></figure><h3 id="3-添加页面点击效果"><a href="#3-添加页面点击效果" class="headerlink" title="3. 添加页面点击效果"></a>3. 添加页面点击效果</h3><p>修改_layout.swig，并在\themes\next\layout_layout.swig文件末尾添加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"/js/clicklove.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>创建clicklove.js文件并置于/themes/next/source/js目录下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">e,t,a</span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>)</span>&#123;c(<span class="string">".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"</span>),o(),r()&#125;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> e=<span class="number">0</span>;e&lt;d.length;e++)d[e].alpha&lt;=<span class="number">0</span>?(t.body.removeChild(d[e].el),d.splice(e,<span class="number">1</span>)):(d[e].y--,d[e].scale+=<span class="number">.004</span>,d[e].alpha-=<span class="number">.013</span>,d[e].el.style.cssText=<span class="string">"left:"</span>+d[e].x+<span class="string">"px;top:"</span>+d[e].y+<span class="string">"px;opacity:"</span>+d[e].alpha+<span class="string">";transform:scale("</span>+d[e].scale+<span class="string">","</span>+d[e].scale+<span class="string">") rotate(45deg);background:"</span>+d[e].color+<span class="string">";z-index:99999"</span>);requestAnimationFrame(r)&#125;<span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> t=<span class="string">"function"</span>==<span class="keyword">typeof</span> e.onclick&amp;&amp;e.onclick;e.onclick=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;t&amp;&amp;t(),i(e)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"div"</span>);a.className=<span class="string">"heart"</span>,d.push(&#123;<span class="attr">el</span>:a,<span class="attr">x</span>:e.clientX<span class="number">-5</span>,<span class="attr">y</span>:e.clientY<span class="number">-5</span>,<span class="attr">scale</span>:<span class="number">1</span>,<span class="attr">alpha</span>:<span class="number">1</span>,<span class="attr">color</span>:s()&#125;),t.body.appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"style"</span>);a.type=<span class="string">"text/css"</span>;<span class="keyword">try</span>&#123;a.appendChild(t.createTextNode(e))&#125;<span class="keyword">catch</span>(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span><span class="string">"rgb("</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">")"</span>&#125;<span class="keyword">var</span> d=[];e.requestAnimationFrame=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;setTimeout(e,<span class="number">1e3</span>/<span class="number">60</span>)&#125;&#125;(),n()&#125;(<span class="built_in">window</span>,<span class="built_in">document</span>);</span><br></pre></td></tr></table></figure><h3 id="4-添加文章置顶"><a href="#4-添加文章置顶" class="headerlink" title="4. 添加文章置顶"></a>4. 添加文章置顶</h3><p>修改 <code>hero-generator-index</code> 插件，将文件：node_modules/hexo-generator-index/lib/generator.js 内的代码替换为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> pagination = <span class="built_in">require</span>(<span class="string">'hexo-pagination'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">locals</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = <span class="keyword">this</span>.config;</span><br><span class="line">  <span class="keyword">var</span> posts = locals.posts;</span><br><span class="line">    posts.data = posts.data.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.top &amp;&amp; b.top) &#123; <span class="comment">// 两篇文章top都有定义</span></span><br><span class="line">            <span class="keyword">if</span>(a.top == b.top) <span class="keyword">return</span> b.date - a.date; <span class="comment">// 若top值一样则按照文章日期降序排</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> b.top - a.top; <span class="comment">// 否则按照top值降序排</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a.top &amp;&amp; !b.top) &#123; <span class="comment">// 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> b.date - a.date; <span class="comment">// 都没定义按照文章日期降序排</span></span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="keyword">var</span> paginationDir = config.pagination_dir || <span class="string">'page'</span>;</span><br><span class="line">  <span class="keyword">return</span> pagination(<span class="string">''</span>, posts, &#123;</span><br><span class="line">    perPage: config.index_generator.per_page,</span><br><span class="line">    layout: [<span class="string">'index'</span>, <span class="string">'archive'</span>],</span><br><span class="line">    format: paginationDir + <span class="string">'/%d/'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      __index: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>之后在文章中添加top属性即可，赋值越大排名越高</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title: test</span><br><span class="line">date: 2019-08-02 13:45:48</span><br><span class="line">tags: </span><br><span class="line">    - 技巧</span><br><span class="line">categories: 技巧</span><br><span class="line">copyright: true</span><br><span class="line">top: 100</span><br></pre></td></tr></table></figure><h3 id="5-添加网页标签图标"><a href="#5-添加网页标签图标" class="headerlink" title="5. 添加网页标签图标"></a>5. 添加网页标签图标</h3><p>修改主题配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">favicon:</span><br><span class="line">  small: /images/favicon.ico</span><br><span class="line">  medium: /images/favicon.ico</span><br><span class="line">  apple_touch_icon: /images/favicon.ico</span><br><span class="line">  safari_pinned_tab: /images/favicon.ico</span><br></pre></td></tr></table></figure><p>这里用的都是一张图片，next原配置也是用的一张图片只是格式大小不同，我试过直接设置favicon: /images/favicon.ico 但是会报错。</p><h3 id="6-设置网页加载进度条"><a href="#6-设置网页加载进度条" class="headerlink" title="6. 设置网页加载进度条"></a>6. 设置网页加载进度条</h3><p>这里用到的是theme-next-pace<br>地址如下：<a href="https://github.com/theme-next/theme-next-pace" target="_blank" rel="noopener">https://github.com/theme-next/theme-next-pace</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pace:</span><br><span class="line">  enable: true</span><br><span class="line">  # Themes list:</span><br><span class="line">  # big-counter | bounce | barber-shop | center-atom | center-circle | center-radar | center-simple</span><br><span class="line">  # corner-indicator | fill-left | flat-top | flash | loading-bar | mac-osx | material | minimal</span><br><span class="line">  theme: flash</span><br></pre></td></tr></table></figure><h3 id="7-设置标签样式"><a href="#7-设置标签样式" class="headerlink" title="7. 设置标签样式"></a>7. 设置标签样式</h3><p>修改主题配置文件,这里因为我用的是next最新版本直接设置即可，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Use icon instead of the symbol # to indicate the tag at the bottom of the post</span><br><span class="line">tag_icon: true</span><br></pre></td></tr></table></figure><p>旧版可以通过修改模板/themes/next/layout/_macro/post.swig，搜索 <code>rel=&quot;tag&quot;&gt;#</code>，将 # 换成<code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code></p><h3 id="8-设置侧边栏"><a href="#8-设置侧边栏" class="headerlink" title="8. 设置侧边栏"></a>8. 设置侧边栏</h3><p>修改主题配置文件，搜索social:找到如下位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">social:</span><br><span class="line">  GitHub: https://github.com/yourname || github</span><br><span class="line">  E-Mail: https://email.com/yourname || envelope</span><br><span class="line">  #Weibo: https://weibo.com/yourname || weibo</span><br><span class="line">  #Google: https://plus.google.com/yourname || google</span><br><span class="line">  #Twitter: https://twitter.com/yourname || twitter</span><br><span class="line">  Facebook: https://www.facebook.com/ || facebook</span><br><span class="line">  Cloudmusic: https://music.163.com/#/user/home?id=247843674 || headphones</span><br><span class="line">  #VK Group: https://vk.com/yourname || vk</span><br><span class="line">  #StackOverflow: https://stackoverflow.com/yourname || stack-overflow</span><br><span class="line">  #YouTube: https://youtube.com/yourname || youtube</span><br><span class="line">  #Instagram: https://instagram.com/yourname || instagram</span><br><span class="line">  #Skype: skype:yourname?call|chat || skype</span><br><span class="line"></span><br><span class="line">social_icons:</span><br><span class="line">  enable: true#是否显示图标</span><br><span class="line">  icons_only: false#仅显示图标</span><br><span class="line">  transition: false</span><br></pre></td></tr></table></figure><p>格式如下<br>Cloudmusic: <a href="https://music.163.com/#/user/home?id=247843674" target="_blank" rel="noopener">https://music.163.com/#/user/home?id=247843674</a> || headphones<br>社交连接名称: 社交连接地址  || 社交连接图标<br>注意该图标必须是Font Awesome中的图标名称</p><h3 id="9-关闭目录自动序列"><a href="#9-关闭目录自动序列" class="headerlink" title="9. 关闭目录自动序列"></a>9. 关闭目录自动序列</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">toc:</span><br><span class="line">  enable: true</span><br><span class="line">  # Automatically add list number to toc.</span><br><span class="line">  number: false#设置为false即可</span><br></pre></td></tr></table></figure><p>参考资料</p><p><a href="https://xian6ge.cn/posts/5b8c41e7/" target="_blank" rel="noopener">https://xian6ge.cn/posts/5b8c41e7/</a>  </p><p><a href="https://www.aisun.org/2017/10/hexo-next+dingzhi/" target="_blank" rel="noopener">https://www.aisun.org/2017/10/hexo-next+dingzhi/</a></p><p><a href="https://blog.csdn.net/nightmare_dimple/article/details/86661502" target="_blank" rel="noopener">https://blog.csdn.net/nightmare_dimple/article/details/86661502</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot-3. 配置视图解析器与拦截器</title>
      <link href="/2019/08/01/SpringBoot-3%20%E9%85%8D%E7%BD%AE%E8%A7%86%E5%9B%BE%E8%A7%A3%E6%9E%90%E5%99%A8%E4%B8%8E%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
      <url>/2019/08/01/SpringBoot-3%20%E9%85%8D%E7%BD%AE%E8%A7%86%E5%9B%BE%E8%A7%A3%E6%9E%90%E5%99%A8%E4%B8%8E%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>在SpringBoot1.5版本中我们通过继承WebMvcConfigurerAdapter类重写addViewControllers和addInterceptors来实现添加视图解析与拦截配置，而在2.1.6版本中WebMVCConfigurationAdapter会被提示失效，此时我们可以通过实现WebMVCConfigurer接口或继承WebMvcConfigurationSupport类来实现之前的功能。详情如下：</p><a id="more"></a><h3 id="一-失效的webMvcConfigurerAdapter配置"><a href="#一-失效的webMvcConfigurerAdapter配置" class="headerlink" title="一. 失效的webMvcConfigurerAdapter配置"></a>一. 失效的webMvcConfigurerAdapter配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> WebMvcConfigurerAdapter <span class="title">webMvcConfigurerAdapter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        WebMvcConfigurerAdapter adapter = <span class="keyword">new</span> WebMvcConfigurerAdapter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">                registry.addViewController(<span class="string">"/"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">                registry.addViewController(<span class="string">"/index.html"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">                registry.addViewController(<span class="string">"/main.html"</span>).setViewName(<span class="string">"Dashboard"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//注册拦截器</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">               registry.addInterceptor(<span class="keyword">new</span> LoginHandlerInterceptor()).addPathPatterns(<span class="string">"/**"</span>).</span><br><span class="line">                        excludePathPatterns(<span class="string">"/index.html"</span>,<span class="string">"/"</span>,<span class="string">"/user/login"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> adapter;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="二-实现WebMvcConfigurer接口"><a href="#二-实现WebMvcConfigurer接口" class="headerlink" title="二. 实现WebMvcConfigurer接口"></a>二. 实现WebMvcConfigurer接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//解决代码</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//设置默认首页</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span></span>&#123;</span><br><span class="line">        registry.addViewController(<span class="string">"/index.html"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">        registry.addViewController(<span class="string">"/"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">        registry.addViewController(<span class="string">"/main.html"</span>).setViewName(<span class="string">"success"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//拦截器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span></span>&#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> LoginHandlerInterceptor()).addPathPatterns(<span class="string">"/**"</span>).excludePathPatterns(<span class="string">"/index.html"</span>,<span class="string">"/"</span>,<span class="string">"/login"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-1-WebMVCConfigurer重点方法讲解"><a href="#2-1-WebMVCConfigurer重点方法讲解" class="headerlink" title="2.1 WebMVCConfigurer重点方法讲解"></a>2.1 WebMVCConfigurer重点方法讲解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 拦截器配置 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry var1)</span></span>;</span><br><span class="line"><span class="comment">/* 视图跳转控制器 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span></span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  *静态资源处理</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span></span>;</span><br><span class="line"><span class="comment">/* 默认静态资源处理器 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span></span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 这里配置视图解析器</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">configureViewResolvers</span><span class="params">(ViewResolverRegistry registry)</span></span>;</span><br><span class="line"><span class="comment">/* 配置内容裁决的一些选项*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">configureContentNegotiation</span><span class="params">(ContentNegotiationConfigurer configurer)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="三-实现WebMvcConfigurationSupport-类"><a href="#三-实现WebMvcConfigurationSupport-类" class="headerlink" title="三. 实现WebMvcConfigurationSupport 类"></a>三. 实现WebMvcConfigurationSupport 类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span></span>&#123;</span><br><span class="line">        registry.addViewController(<span class="string">"/"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">        registry.addViewController(<span class="string">"/index.html"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">        registry.setOrder(Ordered.HIGHEST_PRECEDENCE);</span><br><span class="line">        <span class="keyword">super</span>.addViewControllers(registry);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span></span>&#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">"/**"</span>).addResourceLocations(<span class="string">"classpath:/static/"</span>);</span><br><span class="line">        <span class="keyword">super</span>.addResourceHandlers(registry);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot-2. 数据注入-配置文件</title>
      <link href="/2019/07/28/SpringBoot-2%20%E6%95%B0%E6%8D%AE%E6%B3%A8%E5%85%A5-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
      <url>/2019/07/28/SpringBoot-2%20%E6%95%B0%E6%8D%AE%E6%B3%A8%E5%85%A5-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>配置文件数据注入的流程<br> 1 导入配置文件处理器，pom.xml 添加依赖spring-boot-configuration-processor<br> 2 JavaBean (Person.class Dog.class)定义实体类<br> 3 配置文件 application.yml或application.properties<br> 4 在test(单元测试)运行TestPersonApplicationTests.class观察结果</p><a id="more"></a><h3 id="一-添加依赖"><a href="#一-添加依赖" class="headerlink" title="一. 添加依赖"></a>一. 添加依赖</h3><p>新建springboot maven项目并在pom.xml中添加spring-boot-configuration-processor</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--   导入配置文件处理器   --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="二-定义实体类"><a href="#二-定义实体类" class="headerlink" title="二. 定义实体类"></a>二. 定义实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Person.java</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String LastName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line">    <span class="keyword">private</span> Date birth;  </span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Dog.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Map&lt;String,Object&gt;</code>将唯一的键映射到值<br><code>List&lt;Object&gt;</code>：继承于Collection和一个 List实例存储一个有序集合的元素。<br>Collection接口：允许你使用一组对象，是Collection层次结构的根接口。</p><h4 id="2-1-小技巧"><a href="#2-1-小技巧" class="headerlink" title="2.1 小技巧"></a>2.1 小技巧</h4><p><code>ALT键+Ins键</code><br>选择Getter And Setter构建getXXX()和setXXX()方法<br>选择ToString构建toString()</p><h4 id="2-2-注解详解"><a href="#2-2-注解详解" class="headerlink" title="2.2 注解详解"></a>2.2 注解详解</h4><p><code>@Component</code> 向容器注入对象.<br>@ConfigurationProperties(prefix = “person”)<br><code>@ConfigurationProperties</code>告诉StringBoot将本类中的所有属性和配置文件中相关的配置进<br>行绑定。<br><code>prefix = &quot;person&quot;</code> 配置文件中person下的所有属性进行一一映射<br>只有这个组件是容器中的组件，才能使用容器提供的@ConfigurationProperties功能<br><code>@Validated</code> 校验信息,可以直接在bean属性上配置,也可以在properties中配置。</p><h4 id="2-3-加载不同的配置文件"><a href="#2-3-加载不同的配置文件" class="headerlink" title="2.3 加载不同的配置文件"></a>2.3 加载不同的配置文件</h4><p><code>加载默认配置</code><br>@ConfigurationProperties(prefix = “person”)默认从全局配置文件中获取值，<br><code>加载指定配置</code>properties文件格式<br>@PropertySource(value={“classpath:person.properties”})<br>@PropertySource 只支持XXX.properties文件，不支持XXX.yml文件。<br><code>加载指定配置</code>yml文件格式<br>通过PropertySourcePlaceholderConfigurer来加载yml文件，暴露yml文件到spring environment<br>官方文档<a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-external-config-yaml-shortcomings" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-external-config-yaml-shortcomings</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载YML格式自定义配置文件</span></span><br><span class="line"> <span class="meta">@Bean</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PropertySourcesPlaceholderConfigurer <span class="title">properties</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> PropertySourcesPlaceholderConfigurer configurer = <span class="keyword">new</span> PropertySourcesPlaceholderConfigurer();</span><br><span class="line"> YamlPropertiesFactoryBean yaml = <span class="keyword">new</span> YamlPropertiesFactoryBean();</span><br><span class="line"> yaml.setResources(<span class="keyword">new</span> FileSystemResource(<span class="string">"config.yml"</span>));<span class="comment">//File引入</span></span><br><span class="line"> <span class="comment">//     yaml.setResources(new ClassPathResource("youryml.yml"));//class引入</span></span><br><span class="line"> configurer.setProperties(yaml.getObject());</span><br><span class="line"> <span class="keyword">return</span> configurer;</span><br></pre></td></tr></table></figure><h3 id="三-配置文件"><a href="#三-配置文件" class="headerlink" title="三. 配置文件"></a>三. 配置文件</h3><p><code>配置application.properties与application.yml任意其一即可，两者均是配置文件功能相同</code></p><h4 id="3-1-配置application-properties"><a href="#3-1-配置application-properties" class="headerlink" title="3.1 配置application.properties"></a>3.1 配置application.properties</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#配置端口</span><br><span class="line">server.port=8081        </span><br><span class="line">#配置person的值</span><br><span class="line">person.LastName=张三</span><br><span class="line">person.birth=2019/07/27</span><br><span class="line">person.boss=false</span><br><span class="line">person.maps.k1=v1</span><br><span class="line">person.maps.k2=v12</span><br><span class="line">person.lists=a,b,c</span><br><span class="line">person.dog.name=dog</span><br><span class="line">person.dog.age=12</span><br></pre></td></tr></table></figure><h4 id="3-2-配置application-yml"><a href="#3-2-配置application-yml" class="headerlink" title="3.2 配置application.yml"></a>3.2 配置application.yml</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">person:</span></span><br><span class="line"><span class="attr">  LastName:</span> <span class="string">赵明</span></span><br><span class="line"><span class="attr">  age:</span> <span class="number">21</span></span><br><span class="line"><span class="attr">  boss:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  birth:</span> <span class="number">2019</span><span class="string">/07/27</span></span><br><span class="line"><span class="attr">  maps:</span> <span class="string">&#123;k1:</span> <span class="string">v1,k2:</span> <span class="string">v2&#125;</span></span><br><span class="line"><span class="attr">  lists:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">lisi</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">zhaoliu</span></span><br><span class="line"><span class="attr">  dog:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">小狗</span></span><br><span class="line"><span class="attr">    age:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="四-运行测试"><a href="#四-运行测试" class="headerlink" title="四. 运行测试"></a>四. 运行测试</h3><p>在test(单元测试)运行TestPersonApplicationTests.class观察结果<br>文件格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringBoot单元测试</span></span><br><span class="line"><span class="comment"> * 可以在测试期间很方便的类似编码一样进行自动注入等容器的功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPersonApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Person person;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">2019-07-28 14:48:23.405  INFO 19108 --- [   main] c.c.TestPersonApplicationTests           : Started TestPersonApplicationTests in 5.158 seconds (JVM running for 7.158)</span><br><span class="line"></span><br><span class="line">Person&#123;LastName=&apos;张三&apos;, age=21, boss=false, birth=Sat Jul 27 00:00:00 CST 2019, maps=&#123;k1=v1, k2=v2&#125;, lists=[lisi, zhaoliu], dog=Dog&#123;name=&apos;小狗&apos;, age=2&#125;&#125;</span><br><span class="line"></span><br><span class="line">2019-07-28 14:48:24.049  INFO 19108 --- [   Thread-2] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService &apos;applicationTaskExecutor&apos;</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><p>可以看到已经成功了。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo主题添加页面百分比</title>
      <link href="/2019/07/28/hexo%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E9%A1%B5%E9%9D%A2%E7%99%BE%E5%88%86%E6%AF%94/"/>
      <url>/2019/07/28/hexo%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E9%A1%B5%E9%9D%A2%E7%99%BE%E5%88%86%E6%AF%94/</url>
      
        <content type="html"><![CDATA[<p>首先介绍了Ejs模板引擎以及为Node.js构建的CSS语言——Stylus，便于对博客主题文件中布局与样式的理解。在对主题文件结构有所了解后，为博客添加了一个显示页面百分比的小功能，简单记录一下。<br>主题基于hexo官方主题MiHo，地址<a href="https://blog.minhow.com/" target="_blank" rel="noopener">https://blog.minhow.com/</a>   感谢Miho的作者。</p><a id="more"></a><h3 id="一-ejs和stylus"><a href="#一-ejs和stylus" class="headerlink" title="一. ejs和stylus"></a>一. ejs和stylus</h3><h4 id="1-1-ejs"><a href="#1-1-ejs" class="headerlink" title="1.1 ejs"></a>1.1 ejs</h4><blockquote><p>EJS是一个高效的JavaScript模板引擎,帮你利用普通的 JavaScript 代码生成 HTML 页面。</p></blockquote><p>ejs项目的开发基于node.js和express框架，这里Miho中的ejs文件中包含的partial函数是旧版express中的，其功能现由新版EJS的include函数实现，例如引入/.views/user/show.ejs文件可用以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- include(&apos;user/show&apos;); %&gt;</span><br></pre></td></tr></table></figure><p>ejs基本标签如下<br>&lt;% ‘脚本’ 标签，用于流程控制，无输出。<br>&lt;%_ 删除其前面的空格符<br>&lt;%= 输出数据到模板（输出是转义 HTML 标签）<br>&lt;%- 输出非转义的数据到模板<br>&lt;%# 注释标签，不执行、不输出内容<br>&lt;%% 输出字符串 ‘&lt;%’<br>%&gt; 一般结束标签<br>-%&gt; 删除紧随其后的换行符<br>_%&gt; 将结束标签后面的空格符删除</p><h4 id="1-2-stylus"><a href="#1-2-stylus" class="headerlink" title="1.2 stylus"></a>1.2 stylus</h4><blockquote><p>Expressive, robust, feature-rich CSS language built for nodejs<br>为nodejs构建的富有表现力，功能强大，功能丰富的CSS语言</p></blockquote><p>通俗理解就是为node.js定制的CSS简化版，省去CSS中的花括号、分号等并扩展了语法内函数、@import的用法。<br>官网地址 <a href="https://stylus.bootcss.com/" target="_blank" rel="noopener">https://stylus.bootcss.com/</a></p><h3 id="二-添加布局"><a href="#二-添加布局" class="headerlink" title="二. 添加布局"></a>二. 添加布局</h3><p>沿miho-&gt;layout打开layout.ejs文件，更改如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- partial(&apos;_partial/head&apos;) %&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;container&quot;&gt;</span><br><span class="line">      &lt;%- partial(&apos;_partial/header&apos;, null, &#123;cache: !config.relative_link&#125;) %&gt;</span><br><span class="line">      &lt;div class=&quot;outer&quot;&gt;</span><br><span class="line">        &lt;section id=&quot;main&quot; class=&quot;body-wrap&quot;&gt;&lt;%- body %&gt;&lt;/section&gt;</span><br><span class="line">        &lt;% if (theme.sidebar &amp;&amp; theme.sidebar !== &apos;bottom&apos;)&#123; %&gt;</span><br><span class="line">          &lt;%- partial(&apos;_partial/sidebar&apos;, null, &#123;cache: !config.relative_link&#125;) %&gt;</span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div id=&quot;page_percentage&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;%- partial(&apos;_partial/footer&apos;, null, &#123;cache: !config.relative_link&#125;) %&gt;</span><br><span class="line">    &lt;%- partial(&apos;_partial/after-footer&apos;) %&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="三-添加样式"><a href="#三-添加样式" class="headerlink" title="三. 添加样式"></a>三. 添加样式</h3><p>miho\source\css下style.styl添加。<br>附:_variables.styl可以简单定义部分网站样式，应该是Miho作者预留，每个模块都有注释比较友好。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#page_percentage</span></span><br><span class="line"> <span class="selector-tag">position</span><span class="selector-pseudo">:fixed</span></span><br><span class="line"> <span class="selector-tag">bottom</span><span class="selector-pseudo">:7</span>%</span><br><span class="line"> <span class="selector-tag">right</span><span class="selector-pseudo">:5</span>%</span><br><span class="line"> <span class="selector-tag">line-height</span>: 27<span class="selector-tag">px</span></span><br><span class="line"> <span class="selector-tag">z-index</span>: 12</span><br></pre></td></tr></table></figure><h3 id="四-添加JS"><a href="#四-添加JS" class="headerlink" title="四. 添加JS"></a>四. 添加JS</h3><blockquote><p>当前页面的高度 = 获取当前窗口顶部至页面顶部的高度 + 当前窗口高度<br>$(document).height()  = $(window).scrollTop() + $(window).height()</p></blockquote><p>miho\source\js下main.js文件添加如下代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).scroll(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> d_h = $(<span class="built_in">document</span>).height();</span><br><span class="line">      <span class="keyword">var</span> c_h = $(<span class="built_in">window</span>).height();</span><br><span class="line">      <span class="keyword">var</span> c_t_h = $(<span class="built_in">window</span>).scrollTop();</span><br><span class="line">      <span class="keyword">var</span> schedule = c_t_h / (d_h-c_h<span class="number">-0.5</span>);</span><br><span class="line">      <span class="keyword">var</span> str=<span class="built_in">Number</span>(schedule*<span class="number">100</span>).toFixed();</span><br><span class="line">            str+=<span class="string">"%"</span>;</span><br><span class="line">      $(<span class="string">"#page_percentage"</span>).text(str);</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure><p>到这里基本就完成了可以部署并浏览效果了。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> ejs </tag>
            
            <tag> stylus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot-1. hello word实例</title>
      <link href="/2019/07/25/SpringBoot-1%20hello%20word%E5%AE%9E%E4%BE%8B/"/>
      <url>/2019/07/25/SpringBoot-1%20hello%20word%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>开发工具：IntelliJ IDEA<br>Sping Boot简介：Spring Boot是一个基于Java的开源框架，用于创建微服务、构建独立的生产就绪Spring应用。设计初衷在于简化spring应用的初始搭建与开发过程，通俗理解其不是什么新框架，而是已有框架的整合与配置简化。</p><a id="more"></a><h3 id="一-准备工作"><a href="#一-准备工作" class="headerlink" title="一. 准备工作"></a>一. 准备工作</h3><p>JDK1.8或更高版本<br>项目自动构建工具：Gradle或者Maven，推荐Gradle对比maven有着简洁、灵活、可读性强等特点。<br>开发工具 eclipse或intelij等、个人推荐Intellij</p><h3 id="二-创建springboot应用程序"><a href="#二-创建springboot应用程序" class="headerlink" title="二. 创建springboot应用程序"></a>二. 创建springboot应用程序</h3><p>1、打开intellij，首页Create new project; 2、点击spring assistant<br>【如果没有spring assistant选项，请首页点击configure-&gt;Plugins后搜索安装即可】<br>下一步; 3、project properties，这里默认下一步即可随后选择spring web start并下<br>一步填写工程名字，最终完成应用程序创建<br>目录结构如下<br><img src="/images/my_img/190725-1.jpg" alt></p><h3 id="三-创建HelloController-java"><a href="#三-创建HelloController-java" class="headerlink" title="三. 创建HelloController.java"></a>三. 创建HelloController.java</h3><p>在src-&gt;main-&gt;java中创建包hello，并在包内创建HelloController.java<br>这里的目的是创建web控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">HelloController.java</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> hello;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Greetings from Spring Boot!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@RestController是spring4之后的新注解，即@Controller和@ResponseBody的组合注解，使Web请求返回数据而不是视图。<br>@RequestMapping配置url映射，即可以作用在控制器的某个方法上，也可以作用在此控制器类上<br>当控制器在类级别上添加@RequestMapping注解时，这个注解会应用到控制器的所有处理器方法上。<br>而处理器方法上的@RequestMapping注解会对类级别以上的@RequestMapping的声明进行补充。<br>@RequestMapping中的method参数有很多中选择，一般使用get/post.</p><h3 id="四-创建Application-java"><a href="#四-创建Application-java" class="headerlink" title="四. 创建Application.java"></a>四. 创建Application.java</h3><p>hello包内创建Application.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Application.java</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> hello;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommandLineRunner <span class="title">commandLineRunner</span><span class="params">(ApplicationContext ctx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> args -&gt; &#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"Let's inspect the beans provided by Spring Boot:"</span>);</span><br><span class="line"></span><br><span class="line">            String[] beanNames = ctx.getBeanDefinitionNames();</span><br><span class="line">            Arrays.sort(beanNames);</span><br><span class="line">            <span class="keyword">for</span> (String beanName : beanNames) &#123;</span><br><span class="line">                System.out.println(beanName);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@SpringBootApplication是@Configuration、@EnableAutoConfiguration、@ComponentScan的组合注解<br>(1) @Configuration 是一个类级注释，指示对象是一个bean定义的源。@Configuration 类通过<br>@Bean 注解的公共方法来声明bean<br>(2)@EnableAutoConfiguration 启用 Spring 应用程序上下文的自动配置，试图猜测和配置您可能需要的bean。自动配置类通常采用基于你的<br>classpath 和已经定义的 beans 对象进行应用。被 @EnableAutoConfiguration 注解的类所在的包有特定的意义，并且作为默认配置使用。<br>(3)@ComponentScan为 @Configuration注解的类配置组件扫描指令。同时提供与 Spring XML’s 元素并行的支持。无论是 basePackageClasses()或是 basePackages()（或其 alias 值）都可以定义指定的包进行扫描。如果指定的包没有被定义，则将从声明该注解的类所在的包进行扫描。<br>通俗的讲，@ComponentScan 注解会自动扫描指定包下的全部标有 @Component注解 的类，并注册<br>成bean，当然包括 @Component下的子注解<br>@Service、@Repository、@Controller。@ComponentScan 注解没有类似 、的属性。<br>(4)@Bean 注释是用来表示一个方法实例化，配置和初始化是由 Spring IoC 容器管理的一个新的<br>对象。</p><h3 id="五-运行并访问"><a href="#五-运行并访问" class="headerlink" title="五. 运行并访问"></a>五. 运行并访问</h3><p>运行程序后访问<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a><br>效果如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___&apos;_ __ _ _(_)_ __  __ _ \ \ \ \</span><br><span class="line">( ( )\___ | &apos;_ | &apos;_| | &apos;_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  &apos;  |____| .__|_| |_|_| |_\__, | / / / /</span><br><span class="line"> =========|_|==============|___/=/_/_/_/</span><br><span class="line"> :: Spring Boot ::        (v2.1.6.RELEASE)</span><br><span class="line"></span><br><span class="line">2019-07-25 10:28:56.845  INFO 2912 --- [           main] hello.Application </span><br><span class="line">....................</span><br></pre></td></tr></table></figure><p><img src="/images/my_img/190725-2.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bootstrap练手实例</title>
      <link href="/2019/07/18/Bootstrap%20%E7%BB%83%E6%89%8B%E5%AE%9E%E4%BE%8B/"/>
      <url>/2019/07/18/Bootstrap%20%E7%BB%83%E6%89%8B%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>因为最近实习涉及前端方面东西还是比较多的，故对相关知识进行下简单的总结，并用bootstrap这个比较流行的框架设计了一个简单的网站，主要页面包括主页、相册、归档、文章等页面，以便对其有更深的理解。<br>资源地址：<a href="https://github.com/zyz-1998/project/tree/master/bootstrap_test" target="_blank" rel="noopener">https://github.com/zyz-1998/project/tree/master/bootstrap_test</a></p><a id="more"></a><p>部分页面截图<br><img src="/images/my_img/190718-1.jpg" alt><br><img src="/images/my_img/190718-2.jpg" alt></p><h3 id="一-HTML5与CSS3"><a href="#一-HTML5与CSS3" class="headerlink" title="一. HTML5与CSS3"></a>一. HTML5与CSS3</h3><h4 id="1-1-html5"><a href="#1-1-html5" class="headerlink" title="1.1 html5"></a>1.1 html5</h4><p>Html5作为一种标记语言，对于我们进行网页内容结构的划分有着极其重要的帮助，通过最近的实际应用我对它最大的体会就是能够快速架构出一个网站的基本逻辑结构与内容，这一点在html5中推出的一系列语义标签中体现的尤为突出，有着良好结构与命名规范的页面在我们进行构建样式和定义网页行为时理解起来更加容易。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">""</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span>                  #与main的区别，body定义为表示文档内容</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">nav</span>&gt;</span><span class="tag">&lt;/<span class="name">nav</span>&gt;</span>     #导航栏，html5规范中不允许将其嵌入address标签中使用</span><br><span class="line">        <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">main</span>&gt;</span><span class="tag">&lt;/<span class="name">main</span>&gt;</span>       #每个页面中只能用一次，用以标记页面主要内容</span><br><span class="line">        <span class="tag">&lt;<span class="name">aside</span>&gt;</span><span class="tag">&lt;/<span class="name">aside</span>&gt;</span>     #侧边栏，具有独立性用以对页面进行补充</span><br><span class="line">        <span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>除上述内容，还有许多标签，对于这些标签理解其意义与区别十分重要，尤其在兼容性这方面，例如如下区别：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;header&quot;&gt;   &lt;header&gt;</span><br><span class="line">&lt;div id=&quot;footer&quot;&gt;   &lt;footer&gt;</span><br></pre></td></tr></table></figure><p>前后两者在实际应用中并无太大差别，后者是html5中的新规范，对于我们进行更加清晰的网页布局有着很多帮助，但是也存在着旧浏览器不识别的情况。<br><code>补充</code><br>figure标签规定独立的流内容（图像、图表、照片、代码等等），其内容应与主内容有关，但如果被删除，不应对文档流产生影响。<br>article标签定义独立内容<br>section标签定义文档中的节（section、区段）。比如章节、页眉、页脚或文档中的其他部分</p><p>更多HTML的知识建议访问W3c School浏览文档，便于有更清晰的认识</p><h4 id="1-2-css3"><a href="#1-2-css3" class="headerlink" title="1.2 css3"></a>1.2 css3</h4><p>ccs构建了网页的样式，缤纷多彩的网页就是通过其实现的，就好像盖房子html搭建了整个网页的结构，接下来房子的装饰就交给了css，css3通过模块化，就像装修一样，将网页的装饰分成盒模型、选择器、文本效果、布局等方式，让我们更容易理解和上手。列举几个最近用到的样式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">background-image: linear-gradient(90deg,#f79533 0,#f37055 15%,#ef4e7b 30%,#a166ab 44%,#5073b8 58%,#1098ad 72%,#07b39b 86%,#6dba82 100%) !important;</span><br><span class="line">#构建一条线性渐变的背景，由浏览器处理渲染，不像加载图片，加载时间会受到图片大小影响</span><br></pre></td></tr></table></figure><h4 id="1-3-居中的几种方法："><a href="#1-3-居中的几种方法：" class="headerlink" title="1.3 居中的几种方法："></a>1.3 居中的几种方法：</h4><p>第一，水平居中：(1)margin:0 auto; (2)通过flex来实现<br>第二，垂直居中：(1)通过盒模型调节margin来实现，(2)通过调节父元素padding;(3)当自己高度和父容器高度未知时, 通过绝对定位：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">parentElement&#123; position:relative; &#125; </span><br><span class="line">childElement&#123; position: absolute; top: 50%; transform: translateY(-50%); &#125;</span><br></pre></td></tr></table></figure><p>(4)父容器只有一个元素且父元素高度已知时，通过相对定位</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">parent&#123; height:xxx; &#125; </span><br><span class="line">.child&#123; position: relative; top: 50%; transform: translateY(-50%); &#125;</span><br></pre></td></tr></table></figure><p>(5)还可以用Flex布局：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parentElement&#123; display:flex; display:-webkit-flex; align-items:center; &#125;</span><br></pre></td></tr></table></figure><p>第三，水平垂直居中：通过tansform：translate(-50%,-50%)来实现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">position: absolute; left: 50%; top: 50%; transform: translate(-50%,-50%);</span><br></pre></td></tr></table></figure><p><code>html内容超出了div或p的宽度如何换行让内容自动换行</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">word-wrap：break-word；</span><br><span class="line">overflow：hidden</span><br></pre></td></tr></table></figure><p><code>对于css需要充分理解各属性的区别和应用场景。</code></p><h3 id="二-JQuery"><a href="#二-JQuery" class="headerlink" title="二. JQuery"></a>二. JQuery</h3><p>JQuery是一个JScript函数库，BootStrap是一个基于html、css、JScript的前端框架，移动设备优先原则的响应式设计。并有着众多的UI编辑工具</p><h4 id="2-1-JQuery"><a href="#2-1-JQuery" class="headerlink" title="2.1 JQuery"></a>2.1 JQuery</h4><p>JQuery重点——AJAX异步，能够在不重载整个页面的情况下，加载数据。<br><code>load()方法</code>从服务器加载数据，并把返回的数据放入被选元素中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).load(URL,data,callback);</span><br></pre></td></tr></table></figure><p><code>get()方法</code>通过 HTTP GET 请求从服务器上请求数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.get(URL,callback);</span><br></pre></td></tr></table></figure><p><code>post() 方法</code>通过 HTTP POST 请求从服务器上请求数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.post(URL,data,callback);</span><br></pre></td></tr></table></figure><h4 id="2-2-Jquery显示页面进度"><a href="#2-2-Jquery显示页面进度" class="headerlink" title="2.2 Jquery显示页面进度"></a>2.2 Jquery显示页面进度</h4><p>在应用中实现了一个简单的显示页面进度功能，实际效果可下载本文顶部资源链接查看<br>主要公式： 当前页面的高度 = 获取当前窗口顶部至页面顶部的高度 + 当前窗口高度<br>$(document).height()  = $(window).scrollTop() + $(window).height()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).scroll(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      var d_h = $(document).height();           #获取当前页面的高度</span><br><span class="line">      var c_h = $(window).height();             #获取当前窗口高度</span><br><span class="line">      var c_t_h = $(window).scrollTop();        #获取当前窗口顶部至页面顶部的高度</span><br><span class="line">      <span class="keyword">var</span> schedule = c_t_h / (d_h-c_h<span class="number">-0.5</span>);</span><br><span class="line">      var str=Number(schedule*100).toFixed();   #将小数转换为百分数</span><br><span class="line">            str+=<span class="string">"%"</span>;</span><br><span class="line">      $(<span class="string">"#p_sch"</span>).text(str);</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure><h3 id="三-Bootstrap"><a href="#三-Bootstrap" class="headerlink" title="三. Bootstrap"></a>三. Bootstrap</h3><p>在实际应用中比较喜欢其样式风格、及网格布局，对于他的UI编辑器工具简单体会下，感觉比较不错，可以通过快速搭建好网站，然后再进行进一步地完善，这里因为我在练习中并没有实际应用，所以不再赘述，bootstrap为我们提供了许多基本组件，诸如下拉菜单、按钮组、导航栏、分页、表单组、进度条等，对于我们应用十分方便。列举部分实际应用的代码<br>轮播，这里我用作头部背景，在相册页面实现，主页头部背景采用background-img的方式实现，通过设置header的padding-bottom百分比的形式与最小高度可以不影响网页的响应式设计，但图片比例有问题时可能会出现拉伸现象。</p><h4 id="3-1-轮播"><a href="#3-1-轮播" class="headerlink" title="3.1 轮播"></a>3.1 轮播</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myCarousel"</span> <span class="attr">class</span>=<span class="string">"carousel slide"</span> <span class="attr">style</span>=<span class="string">"width:100%;"</span>&gt;</span></span><br><span class="line">                  <span class="comment">&lt;!-- 轮播（Carousel）指标 --&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"carousel-indicators"</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#myCarousel"</span> <span class="attr">data-slide-to</span>=<span class="string">"0"</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#myCarousel"</span> <span class="attr">data-slide-to</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#myCarousel"</span> <span class="attr">data-slide-to</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">ol</span>&gt;</span>   </span><br><span class="line">                  <span class="comment">&lt;!-- 轮播（Carousel）项目 --&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"carousel-inner"</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item active"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/15.jpg"</span> <span class="attr">alt</span>=<span class="string">"First slide"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/16.jpg"</span> <span class="attr">alt</span>=<span class="string">"Second slide"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"carousel-caption sr-only"</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/17.jpg"</span> <span class="attr">alt</span>=<span class="string">"Third slide"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                  <span class="comment">&lt;!-- 轮播（Carousel）导航 --&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"left carousel-control"</span> <span class="attr">href</span>=<span class="string">"#myCarousel"</span> <span class="attr">role</span>=<span class="string">"button"</span> <span class="attr">data-slide</span>=<span class="string">"prev"</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Previous<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"right carousel-control"</span> <span class="attr">href</span>=<span class="string">"#myCarousel"</span> <span class="attr">role</span>=<span class="string">"button"</span> <span class="attr">data-slide</span>=<span class="string">"next"</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Next<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-2-导航栏"><a href="#3-2-导航栏" class="headerlink" title="3.2 导航栏"></a>3.2 导航栏</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-default"</span> <span class="attr">style</span>=<span class="string">"position:fixed;top: 0;left: 0;width: 100%;opacity:0.8;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">              <span class="comment">&lt;!-- Brand and toggle get grouped for better mobile display --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-header"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"navbar-toggle collapsed"</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">data-target</span>=<span class="string">"#bs-example-navbar-collapse-1"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">                  <span class="comment">&lt;!-- sr-only Bootstrap的辅助类；代表元素只在屏幕阅读器中显示：sc (screen-reader)  --&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Toggle navigation<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                  <span class="comment">&lt;!-- icon-bar 屏幕宽度小于一定程度时，导航栏变为可折叠形式 --&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span> <span class="attr">href</span>=<span class="string">"Home.html"</span>&gt;</span>ZYZ<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="comment">&lt;!-- Collect the nav links, forms, and other content for toggling --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"collapse navbar-collapse"</span> <span class="attr">id</span>=<span class="string">"bs-example-navbar-collapse-1"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Test<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>(current)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav navbar-right"</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"Home.html"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"Archievs.html"</span>&gt;</span>Archievs<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"Album.html"</span>&gt;</span>Album<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"dropdown"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span> <span class="attr">role</span>=<span class="string">"button"</span> <span class="attr">aria-haspopup</span>=<span class="string">"true"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span>&gt;</span>About<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Another action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Something else here<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                      <span class="comment">&lt;!-- role是html5中的新标签，增加语义性 --&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"separator"</span> <span class="attr">class</span>=<span class="string">"divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.navbar-collapse --&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.container-fluid --&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-3-分页"><a href="#3-3-分页" class="headerlink" title="3.3 分页"></a>3.3 分页</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">第一种：在归档页面有实现</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12 col-sm-12 col-md-12 page11"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pagination pagination-lg"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"disabled"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>&amp;laquo;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span> &gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">style</span>=<span class="string">"background-color:#D5D5D5;color:#f79533"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span> &gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">style</span>=<span class="string">"color:#ef4e7b"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span> &gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">style</span>=<span class="string">"color:#5073b8"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span> &gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">style</span>=<span class="string">"color:#1098ad"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span> &gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">style</span>=<span class="string">"color:#07b39b"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span> &gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>&amp;raquo;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">第二种：在page页面有实现</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12 col-sm-12 col-md-12 page11"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pager"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"previous"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>&amp;larr; Previous<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"next"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Next &amp;rarr;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bootstrap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+github 博客搭建历程</title>
      <link href="/2019/07/17/hexo+github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2019/07/17/hexo+github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>详细的将自己搭建博客的过程记录了下，主要是出于两方面考虑：<br>第一，希望能够对同样打算建博客的朋友有所帮助。<br>第二，为自己写博客立起点，让自己养成写博客的习惯，将平日学到的进行总结，避免遗忘。</p><a id="more"></a><h3 id="一-准备工作"><a href="#一-准备工作" class="headerlink" title="一. 准备工作"></a>一. 准备工作</h3><p>1）node.js 安装<br>下载地址：<a href="https://nodejs.org/en/download" target="_blank" rel="noopener">https://nodejs.org/en/download</a><br>2) git 安装<br>下载地址：<a href="https://git-scm.com/download" target="_blank" rel="noopener">https://git-scm.com/download</a><br>3) github注册并建立一个名为123.github.io的仓库，123为你的github账户名</p><h3 id="二-git配置"><a href="#二-git配置" class="headerlink" title="二. git配置"></a>二. git配置</h3><p>该步骤主要目的：将git和github连接起来，便于今后博客的上传部署等操作。</p><h4 id="2-1-设置账户和邮箱"><a href="#2-1-设置账户和邮箱" class="headerlink" title="2.1 设置账户和邮箱"></a>2.1 设置账户和邮箱</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">git</span> <span class="string">config</span> <span class="bullet">--global</span> <span class="string">user.name</span> <span class="string">"your name"</span></span><br><span class="line"><span class="string">$</span> <span class="string">git</span> <span class="string">config</span> <span class="bullet">--global</span> <span class="string">user.email</span> <span class="string">"your email"</span></span><br></pre></td></tr></table></figure><h4 id="2-2-生成并获取ssh秘钥"><a href="#2-2-生成并获取ssh秘钥" class="headerlink" title="2.2 生成并获取ssh秘钥"></a>2.2 生成并获取ssh秘钥</h4><p>git bash 输入命令：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">ssh-keygen</span> <span class="bullet">-t</span> <span class="string">rsa</span> <span class="bullet">-C</span> <span class="string">"***@gmail.com"</span></span><br></pre></td></tr></table></figure><p>***@gmail.com为你注册github时的邮箱，接下来可能需要你输入windows账户的密码，取决于你的账户操作权限,输入密码后一直回车即可。</p><h4 id="2-3-配置github-ssh"><a href="#2-3-配置github-ssh" class="headerlink" title="2.3 配置github ssh"></a>2.3 配置github ssh</h4><p>将上一步生成的秘钥添加至github中，首先复制秘钥，id_rsa.pub文件中，位置如下供参考</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\元天墨染\.ssh\id_rsa.pub</span><br></pre></td></tr></table></figure><p>登录github账户，选择Personal settings &gt; SSH and GPG keys，添加秘钥</p><h4 id="2-4-验证链接"><a href="#2-4-验证链接" class="headerlink" title="2.4 验证链接"></a>2.4 验证链接</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line">Hi xxx! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><h3 id="三-hexo安装配置"><a href="#三-hexo安装配置" class="headerlink" title="三. hexo安装配置"></a>三. hexo安装配置</h3><h4 id="3-1-安装"><a href="#3-1-安装" class="headerlink" title="3.1 安装"></a>3.1 安装</h4><p>首先建立一个hexo文件夹作为安装目录，git bash【在hexo文件夹也就是你的安装位置打开】<br>输入下列命令</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="bullet">-g</span> <span class="string">//安装hexo</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">init</span> <span class="string">blog</span>  <span class="string">//hexo初始化于blog文件夹</span></span><br><span class="line"><span class="string">cd</span> <span class="string">blog</span></span><br><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">//安装相关依赖包</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">server</span> <span class="string">//本地启动hexo【用作博客发布前本地预览】</span></span><br><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-deployer-git</span> <span class="bullet">--save</span>   <span class="string">//使用git方式进行部署博客所需插件</span></span><br></pre></td></tr></table></figure><h4 id="3-2-配置"><a href="#3-2-配置" class="headerlink" title="3.2 配置"></a>3.2 配置</h4><p>_config.yml 站点配置文件<br>package.json 主要描述hexo版本信息及安装的依赖<br>打开_config.yml文件找到deploy并参照下方进行修改</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line">  <span class="string">//repo:</span> <span class="string">应为你的github仓库ssh</span> <span class="string">clone,注意repo:后的空格不能省略</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">git@github.com:zyz-1998/zyz-1998.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h4 id="3-3-部署"><a href="#3-3-部署" class="headerlink" title="3.3 部署"></a>3.3 部署</h4><p>hexo根目录blog打开git bash输入下列命令  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><p>此时就可以在浏览器输入<a href="https://123.github.io/打开hexo默认界面。" target="_blank" rel="noopener">https://123.github.io/打开hexo默认界面。</a></p><h3 id="四-hexo更换主题"><a href="#四-hexo更换主题" class="headerlink" title="四. hexo更换主题"></a>四. hexo更换主题</h3><p>访问hexo官网：<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">https://hexo.io/zh-cn/</a> 在主题页面有许多主题，这里我选择的是miho<br>miho地址：<a href="https://blog.minhow.com/" target="_blank" rel="noopener">https://blog.minhow.com/</a><br>里面有详细的操作流程，这里就不再赘述。</p><h3 id="五-常用命令总结"><a href="#五-常用命令总结" class="headerlink" title="五. 常用命令总结"></a>五. 常用命令总结</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">hexo</span> <span class="string">new</span> <span class="string">"我的博客"</span> <span class="string">//新建文章,在blog\source\_posts会生成对应的md文件</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">new</span> <span class="string">page</span> <span class="string">"pageName"</span> <span class="string">//新建页面，blog\source中生成相应的pageName文件夹</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">g</span> <span class="string">==</span> <span class="string">hexo</span> <span class="string">generate</span> <span class="string">//生成静态网页</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">s</span> <span class="string">==</span> <span class="string">hexo</span> <span class="string">server</span> <span class="string">//启动服务预览</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">d</span> <span class="string">==</span> <span class="string">hexo</span> <span class="string">deploy</span> <span class="string">//开始部署</span></span><br><span class="line"><span class="string">以上是文章摘要</span> <span class="string">&lt;!--more--&gt;</span> <span class="string">以下是余下全文</span> <span class="string">//设置文章摘要</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
